[
["index.html", "BIOL 1001 - Quantitative skills 1 Learning to use R and RStudio", " BIOL 1001 - Quantitative skills 1 Learning to use R and RStudio We are increasing the focus on quantitative skills in our Biology curriculum, in response to changing demands and emphasis within the field of biology itself. In first year biology (BIOL 1001/1002) we are introducing students to R software and basic statistical concepts. The quantitative training guide has been writing to teach MUN biology students R coding to build a foundation for more advanced quantitative analysis of data in upper year Biology courses. We anticipate that this guide will also be a useful resource manual that you will refer back to as you use R in your future courses. Read 1 Introduction. As you read through the next sections, if you encounter a word you do not understand you may wish to consult the Glossary. Follow the steps in 2 R and RStudio to install R and RStudio. If you are having issues with installing the software, check the Frequently Asked Questions. Read 3 Finding your way around RStudio. Have your RStudio software open. When you encounter TRY IT! and text in a grey box and in the Courier font, this is an example of code that we want you to try in RStudio. Note that you should type the code exactly as it is written. When you encounter EXERCISE you are to complete the exercise (to be handed in). Re-size the windows on your computer to view both the quantitative training manual and the RStudio software, or view the training manual on a tablet, with the software open on your computer. Work through 4 Introduction to R. We will sometimes give you only part of the code, or we will give code that has a deliberate mistake in it. This is not to frustrate you - rather it is a way for you to start to develop your problem solving skills. Read the text before and after the example code carefully for clues as to what you should do. Proceed through the sections as assigned by your lab instructor for each week of the labs as specified by your instructor. Expect to get stuck. This is normal when learning a new skill. Everyone who uses R, including professionals who have used it for years, gets error messages and has bugs in their code. You might look for help in 5 Getting help or ask for help from an instructor as specified in section 3. You will be instructed on how much of the manual to complete in each week by your lab instructor. Once you've finished the first-year labs, don't forget that you have this resource. Whenever you practice using R you will get better at it. If you haven't used it for a while, your skills get rusty, but by reviewing the relevant sections of the quantitative training guide you will quickly be able to catch up. Before you know it, you will be confidently doing quantitative work in R, which will increase your knowledge, enhance your ability to do advanced biology work, and give you a marketable skill in the work world. "],
["lab2.html", "2 Quantitative skills laboratory EXERCISE 1. Data entry and graphing with a continuous independent variable EXERCISE 2. Bar plots and boxplots with discrete independent variables EXERCISE 2b. Making a bar plot", " 2 Quantitative skills laboratory PURPOSE To learn how to record data in electronic format To learn how to write hypotheses as equations To learn how to choose the appropriate visualizations To learn how to make graphs using R Studio Before coming to the laboratory: If you have not already, install R and RStudio. Before coming to the laboratory read: Introduction to R Making graphs in R Entering and loading data Section ?? EXERCISE 1. Data entry and graphing with a continuous independent variable The increase of carbon dioxide in the atmosphere is expected to reduce the concentrations of carbonate ions in the surface of the ocean. This process, in general called ocean acidification, affects the biology and survival of a wide range of marine species because it prevents the formation of shells and plates of calcium carbonate. A long term study on coral reefs showed how the net community calcification rate (G, measured in mmol CaCO3m-2d-1) is related to the concentration of carbonate (CO32-, measured in \\(\\mu\\)mol\\(\\cdot\\)kg-1) (Langdon et al. 2000). We will use the data from the research paper (which is summarized in pg. 58 (or pg. 60 in the 2nd Canadian Edition) of the Campbell textbook) to understand this relationship. The results of this experiment are as follows: Table 2.1: Raw data from Langdon and collaborators (2000). CO3 G 230.77 2.99 230.09 4.07 233.79 6.25 235.86 7.34 241.84 8.62 248.27 9.36 254.96 12.45 259.80 14.45 265.79 17.36 271.09 19.54 273.88 22.61 Enter the data We provide this data as a .csv called LangdonDataset.csv. Download this file from Brightspace into the folder where your R files are. NOTE that in the read.csv command that what is inside the quote marks &quot; MUST match the file name in your folder exactly. You also have to include the quotation marks. Then follow the instructions in Entering and loading data and import the data. Note that this is just a subset of the data from the full paper. Include a copy of the code you used in your lab report. Make a graph Follow the instructions in Making graphs in R to make a scatterplot for these data and replicate the figure from the Campbell textbook (see Figure 14.1 below). Include both the code you wrote and the final figure in your lab report. NOTE: Don't worry about figuring out how to write superscripts and subscripts in R for the axis-labels. You can use the &quot;^&quot; symbol to indicate a superscript, and the &quot;-&quot; to indicate a subscript. HINT Think about what you are specifying as x and y in the plot function. Use the tools you learned about in Introduction to R to explore the dataframe. NEW TIP instead of entering the data as a vector the way you learned in Making graphs in R, you can use the code below to create an x vector from a data frame (here I titled my data frame &quot;langdon_data&quot;; your name may be different, and I created a vector of data called &quot;CO3&quot;). The $ sign tells R to look in the data frame specified before the $ sign (in the example below the data frame is &quot;langdon_data&quot; and then read the column that comes after the $ sign (in the example here, it's CO3. The column header you specify after the $ sign MUST match the way it is shown in the dataframe EXACTLY. Use the commands you learned in Introduction to R to confirm what the column header is. You can use this to create the vector of data that you need to plot on the x-axis, and then write you own code to create the vector of data for the y-axis. Figure 2.1: Scatterplot from Langdon et al. study on calcification rate in seawater as a function of carbonate concentration. This figure is found in your textbook on pg. 58 (pg. 60 in the Campbell 2nd Canadian Edition) langdon_data &lt;- read.csv(&quot;LangdonDataset.csv&quot;) CO3 &lt;- langdon_data$CO3 Use the examples in Making graphs in R to create a fully labelled scatter plot. Export this and paste it into your document that you will hand in for this lab. Include both the code you wrote and the final figure in your lab report. HINT if you want to add a line of best fit based on linear regression, use the function abline using a linear regression model (the function lm). Your code will look something like this: abline(lm(y~x)) Refer to the help files for assistance. The two terms on each side of the tilde (&quot;~&quot; symbol) tell R what the equation for the regression y~x is. In your case substitute in what YOU defined as x and y in R. NOTE for the lab assignment, this step is optional. Follow the instructions in Making graphs in R to make a second graph - a line graph for these data. Export your line graph insert it into your lab report. Write a figure caption. Include both the code you wrote and the final figure in your lab report. EXERCISE 2. Bar plots and boxplots with discrete independent variables We will use data from a research paper that investigated whether plants were able to respond to stress cues emitted from their drought-stressed neighbours (Falik et al. 2011). This research project is also discussed in your textbook. The research team used Pisum sativum plants in an experimental setup that allowed them to connect the plants' root systems. One plant in the central position of a row was subjected to osmotic stress, while neighbouring plants remained unstressed on both sides. Plants on one side of the stressed plant shared roots with others in the group but did not share roots with the stressed plant; these were the control group. On the other side, the stressed plant shared its roots with its nearest unstressed neighbour, and all the other plants shared their roots with their nearest neighbour (See Figure 2.2). Figure 2.2: Experimental set up for testing stress cues. Circles represent plants and connector lines represent the plants with connected roots. The numbers of the plants correspond to those of Table 14.2. Osmotic stress was induced in plant 6 (Modified from Falik et al., 2011). Stress was quantified fifteen minutes after the induction of drought by measuring the width of the stomatal openings on the leaves of the plants. The results of this experiment are as follows: Table 2.2: Raw data from Falik and collaborators (2011). type plant width control 1 12.109661 15min 1 11.577023 control 2 11.608355 15min 2 10.903394 control 3 9.446475 15min 3 12.093995 control 4 9.697128 15min 4 11.013055 control 5 10.840731 15min 5 11.483029 control 6 10.746736 15min 6 7.221932 control 7 10.605744 15min 7 7.973890 control 8 11.780679 15min 8 7.080940 control 9 11.608355 15min 9 8.772846 control 10 11.686684 15min 10 9.838120 control 11 11.874674 15min 11 11.639687 Questions Follow the instructions in Entering and loading data to load the data file FalikDataset.csv using the command line (read.csv) option. Note that the data in the CSV file are ordered differently than in the list above (to verify this you can open the CSV file in Excel to see the full set). Looking at the dataset, can you tell how many treatments were applied in the experiment? How many plants were used for each treatment? What is the smallest stomatal width measured? What is the largest? EXERCISE 2b. Making a bar plot Questions Follow the instructions below to replicate the figure from the Campbell textbook (bar plot; see Figure 14.3 below). Export your bar plot and insert it into your lab report. Add a caption to your bar plot and hand it in with your lab report. Include the code you wrote to generate the figure. Figure 2.3: Bar plot from Falik et al. study on plant stress and plant communication. This figure is found in your textbook on pg. 918 (pg. 910 in Campbell 2nd Canadian Edition) To make a bar plot, use the code below as a starting point, and then use the resources in this guide to add appropriate x and y axis labels.Don't worry about figuring out how to write the symbol &quot;mu&quot; in R; you can just write &quot;um&quot; or &quot;micrometres&quot; for now. However, if you want to try writing Greek symbols in R, look at the code below for the boxplot example, and see if you can apply it to your bar plot. width &lt;- falik_data$width #This creates a vector of data of the plant stomatal widths plant &lt;- falik_data$plant #The creates a vector of data of the plant ID numbers barplot(width, names = plant, col = c(&quot;blue&quot;, &quot;red&quot;)) In the bar plot, what can you tell about the stomatal openings of the treatment plant vs. the control plants? Is it consistent across all the individual plants? Follow the instructions below to re-plot the data from EXERCISE 2b as a boxplot that compares control versus treatment. Export your boxplot and insert it into your lab report. Add a caption to your boxplot. NOTE: If you describe what the symbols/colours mean in the caption, then you do not need to include a legend. If you want to try adding a legend (adding one is optional) then look up &quot;legend&quot; in the help window. control &lt;- subset(falik_data, type == &quot;control&quot;) #This subset command is a handy function to break the data into subsets. Here, we&#39;re creating a data frame with just the values from the control. treatment &lt;- subset(falik_data, type == &quot;15min&quot;) #Here we are subsetting the data to contain only the data from the treatment boxplot(control$width, treatment$width, names = c(&quot;control&quot;, &quot;treatment&quot;), ylab = expression(paste(&quot;stomatal opening ( &quot;, mu, &quot;)&quot;))) Label the following on the boxplot: median, 25% and 75% quantiles, 95% confidence limits. HINT you can insert the exported graph into a blank PowerPoint slide and use lines/text boxes to draw the labels. Then save the slide as an image file (e.g., JPEG) and insert it in your lab report. What does the boxplot tell you about the differences between the treatment plants (plants 6-11) vs. the control plants that the bar plot does not? Why do you think a scientist might choose to represent these data one way over another? "],
["howtoask.html", "3 How to ask for help", " 3 How to ask for help The key to getting a useful answer to your R problem is asking a short but complete question. Frequently, this means to provide a reproducible example, which will allow someone else to reproduce your problem by copying and pasting your code. Four things make an example reproducible: a description of your R environment, required packages, code, and data. In BIOL 1001 and 1002, we provide the data that you will be using in the exercises, so it is unlikly that your issue is related to the data. Hence, we emphasize the other components of asking a good question instead. We encourage you to follow the following steps: Do your homework before asking. This step varies depending on where your problem is: If you have installation issues, double-check that you followed the instructions on Section ?? and have downloaded and installed the correct versions of R and RStudio. If you have trouble with coding, first, locate the lines of code where the problem occurs. Copy your code from the beginning up to where the issue occurs. Then, start a new RStudio session, paste and run the code. Starting fresh will help you see if the same issue arises or if it was solved by removing unused elements. If the problem is caused by a function/command not running or not giving the expected output, follow Chapter ?? and read the help for the relevant functions/commands and how to use them. If you receive an error message or a warning, search the web by copying and pasting the output of R. It is likely that your R question has already been answered in websites like Stack Overflow. You can even search Twitter using '#rstats'. Finally, read over Section ?? and other posts in the lab's Discussion List to see if anyone else had a similar problem and how they solved it. Write down your problem, succinctly. Try to simplify your problem as much as possible. You can often answer your question by thinking clearly and going through the simplification process. Remember that you need to report the facts, so please do not write 'R crashed' or 'function xyz doesn't work'. Write exactly what happened, including any error messages R prompted. If you think that a function/command is not behaving sensibly, it's more productive and polite to first, read the relevant documentation (see the previous step), and then ask why it acts the way it does. Provide a short, reproducible example. First, try to locate which lines exactly result in the error. By doing this, you will often find out what the problem is by yourself. Please, do not copy and paste a whole function/chunk of code that gives an error. What is most useful is an accurate description of what commands you type until the problem happens. Do your best to remove everything that is not related to the problem. The shorter your code is, the easier it is to understand. Ensure your code is easy for others to read. Make sure you have used spaces and your variable names are concise, but informative. This is also a good moment to check that your problem is not related to a typo in the name of an object. Remember that in R capitalization matters (e.g. X is not the same as x). Use comments often to explain what you did and to indicate where your problem is. When you copy from the R console, take a few seconds to remove any '&gt;' and '+'. For example, if your code looks like this: &gt; x &lt;- matrix(1:8, nrow=4, ncol=2, dimnames=list(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;), c(&quot;x&quot;,&quot;y&quot;))) &gt; x x y A 1 5 B 2 6 C 3 7 D 4 8 We cannot copy and paste it directly. By removing the “&gt;”, you save us time in responding your question. You should also use # for outputs and comments, like this: # First, I define a matrix: x &lt;- matrix(1:8, nrow=4, ncol=2, dimnames=list(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;), c(&quot;x&quot;,&quot;y&quot;))) x # x y #A 1 5 #B 2 6 #C 3 7 #D 4 8 Check that you have made a reproducible example by starting up a new RStudio session, pasting your code from the step above and running it. In this way, you are sure that you made a piece of code that we can run to see the problem. Anyone should be able to copy and paste your code and data and get the same issue. We need some facts about your machine, operating system, and version of R. To get this information, type the following command in the console: sessionInfo(). Paste the full output in your question. When mentioning version numbers, always use the complete version number, e.g., '2.6.1', instead of '2.6', and mention the platform (Windows, Linux, MacOS X, with their versions). We also need to check which version of RStudio you are using. For this, type in the console rstudioapi::versionInfo() and provide the full output in your question. If you have a package-specific problem, you should give its version by providing the output of packageVersion(&quot;name of the package&quot;). Before putting all of your code in an email, we encourage you to post it on the lab's Discussion List. By doing this, we can help multiple people that may have the same problem at the same time. It also helps us to reply faster because we do not have to answer similar questions many times. Reading and commenting online is an essential component of learning programming, and it is one of the assets that makes R useful, more accessible and fun. The Discussion List is our small R community, and when you post on the Discussion List, we learn together. Write a specific, informative subject line. Please do not write: 'question', 'Lab 2' or 'R crashed'. Good examples are: 'R Studio: &quot;Error: …&quot;', 'Q3, &quot;Error in plot.xy(xy, type, ...) : invalid plot type 1&quot;', or 'q10, outliers and percentiles'. Use good manners. Rudeness is not acceptable. Be tolerant. Sometimes read the manual is the appropriate response to your question. An answer that is concise and technically accurate is just that, it is not intended as pedantic or an affront. Please do not complain or say that you want to drop out if you cannot finish the lab; this tends to create negative attitudes that are not useful when answering your questions. Remember that we are trying to help you learn. Example of a good question: Subject: transform matrix to dataframe of specific dimensions. # If I have a matrix x as follows: x &lt;- matrix(1:8, nrow=4, ncol=2, dimnames=list(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;), c(&quot;x&quot;,&quot;y&quot;))) x How can I turn it into a dataframe with eight rows, and three columns named 'row', 'col', and 'value', which have the dimension names as the values of 'row' and 'col'? # example of desired output # x_transformed # row col value # A x 1 # B x 2 # C x 3 # ... "],
["introduction-to-programming.html", "Introduction to programming 3.1 What is a computer? 3.2 What is a program? 3.3 What is a programming language? 3.4 Why code?", " Introduction to programming 3.1 What is a computer? Computers are tools that can do mainly four things: take input (information), store the input as data, process the data, and output the results. The input is how you tell a computer what to do (e.g. with the mouse, keyboard, touchscreen, microphone). These inputs provide information that the computer stores in its memory. The computer's processor can access this information, manipulate it using algorithms or programs, and save the processed data back in the memory. The processing can consist of multiple operations, at the end of which the information can be outputted. The output depends on the computer and could be a matrix, a database, text, images, videos, games, etc. 3.2 What is a program? A program is a sequence of instructions that tell a computer how to process the information provided as input. In simple words, programs are the recipes that tell the computer how to do or execute a task. Programs are also referred to as Apps, and when we execute a program or an App, we usually use the word &quot;run&quot; We can classify programs depending on where it runs. For example, web apps run on web browsers (e.g. Google Docs), mobile apps run on your smartphone (e.g. Pokémon GO), and desktop apps are installed and run on your computer (e.g. Microsoft Word desktop app). Computer programs are also called code. So, coding or programming is the action of writing instructions for computers to do specific tasks. 3.3 What is a programming language? The language of computers is called binary code. Binary code is a two-symbol system, often &quot;0&quot; and &quot;1&quot; (from the binary number system), which represent the states &quot;off&quot; and &quot;on&quot;. In binary code, each character or instruction is assigned a pattern of binary digits (aka. bits). Unfortunately, it is hard for humans to understand binary code. Hence, to communicate with computers we need to use a special kind of language. A programming language is a language that can be translated into the machine binary code, but it is easier for humans to comprehend and write. Programming languages are developed to build programs. There are hundreds of programming languages. In this guide, you will learn to code in the R language. R is an interpreted language, which means that the computer will read an instruction in the programming language, translate it into machine code, and then execute the machine code version. Once that instruction finished, the computer moves along to the next one, and performs the same task again until there are no more instructions to complete. Nevertheless, this is a fast process, and you do not need to worry about the steps that the computer is doing underneath the hood. 3.4 Why code? We are used to pointing our mouse and clicking on an icon to perform tasks on our computers. This visual process is intuitive to learn. However, when we have to repeat the same operation thousands of times, clicking and dragging become tedious and inefficient in delivering instructions to the computer. For example, you have to plot the results of an experiment conducted 30 times. But, the machine that does the measurements stores the data in individual folders. So, first, you have to find each datafile. Then, you have to copy the last line of each datafile into a single file. You can complete all these tasks using the mouse, although you would be clicking at your desk for several hours. Imagine that there was an error in the data, or that you have to repeat the experiment. Now you have to continue clicking some more hours and can potentially commit a mistake while completing this repetitive task. In a situation like this (and many others!), being able to write a program that performs the operations for you is the best skill. Coding allows you to do repetitive tasks automatically and fast, as many times as you want. Further, programming enables you to do many complicated processes (e.g. data analyses and model simulations) and increase the reproducibility and repeatability of your research. Learning to code takes effort and time. As with any language, you will have to learn new vocabulary. But, a small number of words or commands will get you a long way. Let's get started! "]
]
