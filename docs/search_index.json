[
["index.html", "Quantitative skills for biology Chapter 1 Introduction", " Quantitative skills for biology Chapter 1 Introduction Quantitative skills are important in biology. Quantitative skills include performing statistical analyses, managing and reformatting data, designing experiments, interpreting graphs, vizualizing data, identifying genes from DNA sequences, constructing 3D models of proteins, and making phylogenies. All of these tasks are now performed using computer software, and elements of computer programming, statistics, and applied mathematics can be useful for professional biologists. Quantitative skills and best practices in data science are now being incorporated throughout the biology major. Teaching quantitative skills is necessary since a survey reported that more than 90% of ecologists found, that in retrospect, their training in statistics and mathematics, during their undergraduate biology major, was too low (Barraquand et al. 2014). This same study found that practicing ecologists recommended that 30% of coursework during a biology major be dedicated to quantitative training. Today’s biologists use a variety of softwares and particularly, Microsoft Office, R, Python, and ArcGIS. Much of this quantitative training manual teaches data manipulation and visualization in R. Our choice of R is for the following reasons: A valued skill: As of March 2019, R is the fifth ranked software listed in job advertisements for Data Scientists. Python is the number one ranked software, but R has a strong reputation for statistical analyses, which are an important tool in biology. Reproducibility: R is a scripting software, so unlike point and click softwares, the steps to produce a data analysis or figure are fully reproducible. Accessibility: R is free. No limits: R has a large user community and contributed packages allow you to do almost anything. R packages range from serious to fun). Popularity: A survey of studies from of 30 ecology journals found that in 2017, 58% of article used R as the primary tool to generate their results (Lai et al. 2019). "],
["install.html", "Chapter 2 How to install R and R Studio", " Chapter 2 How to install R and R Studio R can be installed from https://www.r-project.org/. If you have problems with installing R this same website provides advice on how to seek support. Give link out to Pirates Guide to R. R is a scripting language. R Studio is a graphical user interface (GUI) that facilitates R coding by providing buttons and menus to provide options for some commonly used commands. Download the free version RStudio Desktop from https://rstudio.com/products/rstudio/ Link out to Pirates Guide to R. "],
["rstudio.html", "Chapter 3 Finding your way around RStudio 3.1 Source pane 3.2 Console pane 3.3 Enviornment/History pane 3.4 File/Plots/Packages/Help pane", " Chapter 3 Finding your way around RStudio R studio has 4 windows (also known as “panes”) that are inter-linked. The default layout is shown in Figure 3.1. You can move the layout of the panes and change their size and shape by clicking and dragging with your mouse along the window pane borders. The details of what happens in each pane are detailed below. Figure 3.1: Panes in RStudio. 3.1 Source pane This is where you create and edit R scripts. R scripts are just text files with a “.R” extension at the end of the filename. When you’ve written and saved a script, you can re-use it for future projects. So, before you start typing here, you should save the file under a new name. 3.2 Console pane On the surface, this looks a lot like the source pane, since it’s where you can also type code. However, it differs because there is a prompt (the “&gt;” symbol) and here the code is actually evaluated. TRY IT! type 5 + 5 in the console at the prompt and press “enter”. You’ll see the R gives the correct output (10). TIP you should try to type code in the source pane, so it gets saved. You can test it by clicking the “Run” button on the top of the source pane. TIP use the console to test code/debug, or do a quick analysis. If you want to see a previous line of code you types, press the up arrow to scorss through past comments, from most to least recent. 3.3 Enviornment/History pane This pane has several tabs, we’ll discuss each in turn. Environment tab This shows you the names of all data objects (e.g., vectors, matrices, dataframes) that you’ve defined in the current R session, along with information about the size of data objects. There are also clickable actions, like “Import data set”, which we’ll refer to later. History tab This shows you a history of all the code you’ve previously run in the console. 3.4 File/Plots/Packages/Help pane This pane also has a few tabs Files tab This tab gives you access to the file directory on your own computer. It’s a useful spot to set your working directory (see Chapter 6). Plots tab This tab lets you see all the plots (graphs) that you create. You can also uset the buttons at the top to zoom, and to export the graph as a PDF or jpeg file. Packages tab This tab shows a list of all the R packages installed on your computer (see chapter 5 for more on installing packages). It also indicates which are loaded with a check mark. Packages are add-on functions and datasets that you can add to your R installation. To install a package… Help tab This lets you get help with R functions. Type the name of the function in the search window (blank bar with the magnifying glass beside it). See Chapter 4 “Getting R help” for more details. "],
["help.html", "Chapter 4 Getting R help 4.1 Using R help 4.2 R “Cheatsheets” 4.3 R books 4.4 How to interpret R help files 4.5 Common errors", " Chapter 4 Getting R help The first place most people go for R help is the “Help” tabe in the “Files/Plots/Packages/Help” pane on the console (described in Chapter 3). Here you can do a search by topic/term using the search window at the top right. You can also click the “house” icon to go to the home menu for the help files and use the table of contents there to navigate to what you are looking for. 4.1 Using R help The hardest part about R help files is that at first they don’t seem that helpful, and to new R users, they seem to be written in code. However, all of the help pages are structured the same way, so once you learn how to de-code them, you’ll be well on your way. Below is an example of how to interpret R help files 4.2 R “Cheatsheets” Because R is open source software, there is also a culture of open access help. Several R programmers have made helpful “cheatSheets” that are worth printing off and hanging by your desk. Try this one by Tom Short for starters. 4.3 R books As with the cheatsheets, there are open access books out there (as well as expensive ones to buy). For beginners, “The Pirates Gude to R” by Nathaniel D. Phillips is HIGHLY recommended. You can access it here 4.4 How to interpret R help files R documentation follows the following format. As an example, we’ll use the screenshot below for a really simple statistical command (the t-test) to walk you through the R documentation. Numbers below correspond to the labels on the screenshot. header This simply gives the command for the thing you are trying to do, in R language Title This is a title of the function/command/tool in more plain language Description This section provides a short description of what the command does, written in reaonably plain language Usage This is where you see an example of R code that you use to execute the command (TIP you can tell what text in the help file is R code and what is other information by the font. Example code is in Courier font). Any example prefaced teh two hashtags (“##”) is a comment that adds additonal descitpion or provides different options for the comment. For example, for the t-test here, the first exampe is for the default method, where you are doing a t-test for a difference between two numeric vectors of data values (“x” and “y”). The second example is where you are applying the t-test to a formula instead of two numeric vectors. Until you start doing more advanced statistics, the default method will usually be what you use. Arguments This section breaks down every element in the R code under “Usage” above it and describes what the input is that you need to provide. It also gives you details about the options as well as what the defaults are. For example, for the t-test documentation here, it tells you that “x” is “a (non-empty) numeric vector of data values”. It also tells you that this is what “y” is but not that it tells you that “y” is optional (i.e., you can do a t-test on just one vector of data values). This fact is also shown in the example code where it says “y = NULL”). Note that you often do not have to input ALL the arguments. If you are happy with the defaults you don’t have to type in the code. For example, the description of the argument “alternative” tells you that you can specify whether the alternative hypothesis is two-sided (i.e., two-tailed), or one-tailed, in which case you have to say whether the alternative hypothesis is that the second set of data (e.g., the treatment) are greater or less than the first (e.g., the control). The default is that you are assuming the alternative hypothesis is two-sided. If this is what you want, then your code only needs to look like this t.test(x, y) However, if you want a one-sided test, and your alternate hypothesis is that the treatment (y) is greater than the control (x), then you need to type a bit more code, like this: t.test(x, y, alternative = c(&quot;greater&quot;)) Details This sectin gives you a little more detail (written a bit more like a stats text) about what the function is doing. For more advanced functions, there may be details on the types of inputs allowed and other caveats. This section is really helpful to read closely! Value This section lists the objects (output) created when you execute the command. The relevance of this list will become more clear once you start using R. See Also This section is usually just links to similar commands to the one you are reading up on, or related to it somewhow. These can be useful to explore when doing more complex statistical tests, or if you are not sure which test you should be using. Clicking the link will just take you to the Documentation page for that command, which will be set up exactly the same way as this one. 9 Examples This gives sample code and output. If you have installed the necessary package(s) to run this code, you can just try the code out yourself by typing the code exactly as shown in the example in the Console window of RStudio. It will call data that comes built in with the package when you installed it and can be a helpful way for you to understand how the command is working before you try it with your own data. 4.5 Common errors Spelling mistakes Input to a function is the wrong data type "],
["data.html", "Chapter 5 Data and metadata", " Chapter 5 Data and metadata Joany will write this section. Maybe we could do a lab meeting or eco-evo to figure out what to do for metadata, i.e., look for good examples. I think look at the Ethan White course. The paper by Kara Woo is quite good and worth a cite. Here we need to provide the rationale for saving data as we recommend we also need to provide the metadata guidelines. Maybe find a paper by someone who is up on this kind of stuff and see how they did the metadata. Also talk about why highlight cells in excel or making borders isn’t a good idea, i.e. tidy data exercise. Twitter recommends: https://github.com/ropenscilabs/dataspice https://aslopubs.onlinelibrary.wiley.com/hub/journal/23782242/about/author-guidelines#data https://www.usgs.gov/products/data-and-tools/data-management/metadata-creation Browse http://sciencebase.gov and http://data.usgs.gov for both good and bad examples fo these standards in use (as well as examples from before) http://Data.gov will have more examples too The metadata sectin of this paper is really great for a quick run down of what metadata is: https://ojs.library.queensu.ca/index.php/IEE/article/view/4608 "],
["data-entry.html", "Chapter 6 Entering and loading data 6.1 Entering data 6.2 Loading or importing data 6.3 Inspecting the data", " Chapter 6 Entering and loading data 6.1 Entering data Good data organization is the foundation of any research project, and this begins with entering and archiving data. There are several reasonable options for data entry, for example: Spreadsheet Text file Database Form (web or GUI databases). In R, you can also input data directly, which can be the right choice if you are working with a small dataset. Here, you will learn how to enter the data from your experiments and save them using R. Let’s start by making Table 1 for your report, which we will call solution-concentration-effect-on-potato.csv: table1 &lt;- data.frame(weight = c(&quot;initial&quot;, &quot;final&quot;, &quot;difference&quot;, &quot;percent-change&quot;), &quot;NaCl-0-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-0.9-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-2-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-5-percent&quot; = c(NA, NA, NA, NA)) write.csv(x = table1, file = &quot;solution-concentration-effect-on-potato.csv&quot;, row.names = FALSE) In the above code, make sure to replace the NA’s with the values from your experiment. Keep in mind that the values entered into the tables should be decimals greater than or equal to zero, and likely less than 100 since you measured mass in grams and the potato cubes for the experiments were 8 cm3 in size. Notice that we used the file extension “.csv”. CSV stands for comma-separated values, which is a format for tabular data stored in a text file where a comma separates the columns of the data. That is why a comma separates each of the values in the rows for the different solutions. Now, we will make Table 2, which includes the class averages and we will call solution-concentration-effect-on-potato-averages.csv: table2 &lt;- data.frame(weight = c(&quot;percent-change&quot;, &quot;minimum-value&quot;, &quot;maximum-value&quot;, &quot;difference&quot;), &quot;NaCl-0-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-0.9-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-2-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-5-percent&quot; = c(NA, NA, NA, NA)) write.csv(x = table1, file = &quot;solution-concentration-effect-on-potato-averages.csv&quot;, row.names = FALSE) You might have just done this in Excel. We did not teach this method because… 6.2 Loading or importing data We will look at two ways of importing data into R, via a command or using the import feature. Both options are equivalent; and when they are sucsesfull you will see your data as a new object in the Environment tab (in the Environment/History pane). 6.2.1 The programmatic way We can load our our data files in CSV format into R using the function read.csv in the following way: data1 &lt;- read.csv(file = &quot;solution-concentration-effect-on-potato.csv&quot;) data2 &lt;- read.csv(file = &quot;solution-concentration-effect-on-potato-averages.csv&quot;) Here, the argument file = of read.csv is the name of the file we want to read. Notice that the filename needs to be a character string, so we put it in quotes. 6.2.2 The RStudio way In RStudio, click on the Environment tab. Then, click on Import Dataset and select From Text (base). Figure 6.1: Using the Import Dataset feature. This feature will open a file browser where you can locate the .csv file, in our case, for Table 1, it is called solution-concentration-effect-on-potato.csv. Once you have selected the file click Open. A dialog for importing the file will open up: on the left you can set the options on the import; on the top right you can see Input File, which is how the file looks like; on the bottom right you can see Data Frame, which is a preview of how the file or data will look like in R. In the Name field, write data1 to rename the dataset. Set Heading to Yes, this will tell R to read and include the first row of the file as the names of the columns - This is an important step! You will see that the column names appear in bold in the Data Frame box. When you are ready click Import. Figure 6.2: Dataset import options. RStudio will now run the R code that imports your dataset. It will be similar to the command used in Section 6.2.1. 6.3 Inspecting the data To take a look at our dataset, we can print it by typing the name in the Console and hitting Enter (or Return). data1 ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA data2 ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA You can also open the dataset by clicking on the object data1 in the Environment tab. This will open a new tab with the dataset, instead of printing it into the Console, which is a good choice if your dataset is larger. Another option is to open the dataset using Microsoft Excel from your computer file browser. "],
["graph.html", "Chapter 7 Making graphs in R 7.1 Other useful plot functions 7.2 Getting a bit more sophisticated 7.3 First we plot x and y with the “temp” vector as “x” and the “fishA” vector as y 7.4 Then to add a second vector of data (fishB) to the same plot, we use:", " Chapter 7 Making graphs in R You might have had experience making graphs using Excel. However, making graphs with Excel is NOT recommended. This is because the defaults in Excel do not meet standards for good scientific graphs. You can make very attractive, clean, professions graphs and figures in R. This chapter is a basic introduction to plot functions in R. More advanced users can use the package “ggplot” (see chatper XX in this manual) There are many good reference manuals for making sophisticated graphs (e.g., Murrell 2006; Mittal 2011). In base R, the “plot” function simply looks to plot two data vectors “x” and “y”. For example if x &lt;- cbind(2,4,6,8,10) y &lt;- cbind(10,20,30,40,50) plot(x,y) Will give you a graph like this: Figure 7.1: A poor example of a scatter plot NOT THAT THIS DOES NOT MEET THE STANDARDS OF A GOOD FIGURE! What’s missing? meaningufl x and y axis labels maybe it’s more appropriate to show this data connected with a line maybe you want the symbols to be a different shape or colour You can address these issues with the plot function. Try using the help function to figure out what to do (refer to Chapter 4, “Getting help in R”, to recall how to use help files): help(plot) You’ll see there are a lot of argument options. First, let’s fix the axis labels. plot(x,y, xlab = &quot;temperature (degrees C)&quot;, ylab = &quot;growth rate (cm)&quot;) This one is a little better: Figure 7.2: The same scatter plot as Figure 9.1, but with axis lables If you want to change the symbols, you use the pch function to change the style. TIP you can make a little cheat sheet for pch codes using this code. Print it out and tape it up on your wall by your computer, or in the front of your notebook as a handy reference. #++++++++++++++++++++++++++++++++++++++++++++ #generate a plot of point shapes which R knows about. #++++++++++++++++++++++++++++++++++++++++++++ generateRPointShapes&lt;-function(){ oldPar&lt;-par() par(font=2, mar=c(0.5,0,0,0)) y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5))) x=c(rep(1:5,5),6) plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5), axes=FALSE, xlab=&quot;&quot;, ylab=&quot;&quot;, bg=&quot;blue&quot;) text(x, y, labels=0:25, pos=3) par(mar=oldPar$mar,font=oldPar$font ) } generateRPointShapes() So, let’s re-do the graph in Figure 9.1, but with filled triangles. plot(x,y, pch = 17, xlab = &quot;temperature (degrees C)&quot;, ylab = &quot;growth rate (cm)&quot;) And we get… Figure 7.3: The same scatter plot as Figure 9.2, but with symbols as filled triangles 7.1 Other useful plot functions The generic “plot” function makes a scatter plot, with variations. For other types of plots, R has different functions, but all have similar arguments for adjusting the labels, spacing, tic marks, symbols, etc. See the following barplot{graphics} to make bar graphs boxplot{graphics} to make boxplots hist{graphics} to make a histogram 7.2 Getting a bit more sophisticated It’s not hard to get more sophisticate with R graphics. The best approach is to explore one of the reference books listed to figure out how to do what you want to do. One thing most undergrads will probably need or want to do is to visualize two sets of data on the same graph. For example, the goldfish data in the Appendix of the BIOL 1001 lab manual shows the opercular beats of two fish in response to temperature. It would be logical to show both fish on the same graph, but with different symbols. Here’s how you would do it: ```temp &lt;- cbind(5, 8, 12, 16, 20, 23) #This creates the vecor of data for the x-axis fishA &lt;- cbind(36, 42, 59, 73, 88, 96) #This creates the vector of data for Fish A fishB &lt;- cbind(40, 49, 61, 71, 82, 90) #This creates the vector of data for Fish B 7.3 First we plot x and y with the “temp” vector as “x” and the “fishA” vector as y plot(temp, fishA, pch = 17, xlab = “temperature (degrees C)”, ylab = “opercular beats (bpm)”) 7.4 Then to add a second vector of data (fishB) to the same plot, we use: points(temp, fishB, pch = 17, col = “dimgray”)``` Voila! Figure 7.4: The effect of water temperature on opercular beats per minute (bpm) for two goldfish; goldfish A (black triangles) and goldfish B (grey triangles) Note that the difference in the two symbols is described in the caption. For most scientific journals it is preferred to describe the symbology in the caption, rather than use a legend. However, with more complex graphs, or for some publications, you may wish to include a legend. Legends can be a bit tricky to work with in R - we’ll leave those for a more advanced course. "],
["hypothesis.html", "Chapter 8 Writing preditions as equations", " Chapter 8 Writing preditions as equations The process of science is often called the scientific method. Many scientific investigations begin with the statement of a problem, which is usually worded in the form of a question. Problems should be clearly expressed and worded such that they have a specific answer. The proposed answer to the problem is termed an hypothesis. Hypotheses are formulated generally on the basis of some preliminary observations in combination with prior knowledge. Consider the problem: how does the presence of a concentration gradient affect the direction of osmosis? There are three possible answers to this problem: Water diffuses from a hypertonic solution into a hypotonic solution. Water diffuses from a hypotonic solution into a hypertonic solution. Water diffuses equally in both directions. All three meet the basic requirement of an hypothesis, namely, they are predictive, are clearly expressed and are an answer to the problem; however, #2 is the most likely hypothesis. Experiments, observational studies, and mathematical models are designed and carried out to test the validity of hypotheses. Experiments represent a practical set of circumstances that determine whether predictions generated from the hypothesis will come to pass if the hypothesis holds true. Consider an osmometer containing a 30% glucose and dye solution placed in a beaker containing distilled water. If hypothesis #2 holds true water will diffuse from the hypotonic solution (the water in the beaker) into the hypertonic solution (the 30% glucose and dye solution in the osmometer) and the water will rise in the pipette. Note how this prediction was generated using the if … then … format. i.e. if the hypothesis holds true then a specific event will occur (prediction) e.g. If water diffuses from a hypotonic solution into a hypertonic solution (hypothesis) then water will diffuse from the beaker into the osmometer causing the water in the pipette to rise. Although hypotheses and predictions are similar, two basic differences exist: hypotheses are general, predictions are specific; hypotheses are written in the present tense, predictions in the future tense. Hypotheses are tested using statistics, and this involves writing the hypothesis as an equation. Generally, a hypothesis describes the affect of one factor on another, for example, the effect of a concentration gradient on the direction of osmosis. These factors are called variables and are of two types: the variable that is changed (varied) by the experimenter is called the INDEPENDENT VARIABLE, and the variable that changes as a consequence of the changes to the independent variable is called the DEPENDENT VARIABLE. In this example the concentration gradient is the independent variable because it is created by the experimenter and the direction of osmosis is the dependent variable because it is affected directly by the concentrations inside and outside the osmometer. (MORE HERE) In carrying out an experiment, observations are made and recorded. These observations are collectively the results of the experiment. Good experimental design demands that only one independent variable is tested at a time (i.e. all other variables/conditions are kept constant so that any changes in the dependent variable can be regarded as due to the particular independent variable being tested). Experiments typically have two basic components: a CONTROL GROUP and an EXPERIMENTAL GROUP which differ with respect to only one factor, the independent variable. In the experimental group the independent variable is varied; whereas, in the control group it is not varied. In this way the control demonstrates (if there is no change to the dependent variable) that no other factor is affecting the dependent variable except the independent variable, and serves as a standard of comparison with the experimental group. Since we hypothesized that water diffuses from a hypotonic solution into a hypertonic solution, the setup having the concentration gradient (i.e. hypotonic and hypertonic solutions separated by a membrane) is the experimental setup. A control for this would be another setup not having a concentration gradient (i.e., with equal concentrations on either side of a membrane). The only difference between the two groups is the presence of a concentration gradient, i.e. the factor being tested. After the experiment has been completed the results are analyzed, by applying statistics and, if necessary, plotted on graphs to show any general trends in the way the independent variable affects the dependent variable. Following statistical and graphic analysis the results are discussed. The discussion tries to account for why the independent variable affects the dependent variable (or why not?). One might also discuss the appropriateness of the experimental design in testing the hypothesis or any sources of error (factors also affecting the dependent variable) that may have been present in the experiment. Often times in articles published in scientific journals, authors tend to relate how this experiment relates to previous published work in this field or how the new knowledge gained from their study can be applied to other situations. As a consequence of the discussion of the results, a conclusion may be formulated as to the extent to which the original hypothesis is, or is not, supported. An hypothesis which has been repeatedly supported by the results of experiments so that a high degree of confidence is placed in its validity is called a theory. When the confidence in its validity is even higher the hypothesis has the status of a law. (Up to here is the content of “Appendix II - The Scientific Method”. Should we continue with “Appendix III - Writing up Experiments”?) "],
["lab2.html", "Chapter 9 BIOL 1001: LABORATORY 2 BIOLOGICAL DATA WITH COMPUTERS EXERCISE 1. Intro to RStudio EXERCISE 2. Entering data EXERCISE 3. Discrete independent variable EXERCISE 4. Continuous independent variable", " Chapter 9 BIOL 1001: LABORATORY 2 BIOLOGICAL DATA WITH COMPUTERS PURPOSE To familiarize with R Studio To learn how to record data in electronic format To learn how to write hypotheses as equations To learn how to choose the appropriate visualizations To learn how to make graphs using R Studio Before coming to the laboratory: If you wish to use your own laptop, then install R and RStudio. For instructions see Chapter 2. Before coming to the laboratory read: In the quant guide: Sections In the printed lab manual: Appendix II: Something or other EXERCISE 1. Intro to RStudio Maybe borrow a little exercise from software carpentary. Nothing to hand in/assess? EXERCISE 2. Entering data We will use data from a research paper that investigated whether plants were able to respond to stress cues emitted from their drought-stressed neighbours (Falik et al. 2011). The research team used Pisum sativum plants in an experimental setup that allowed them to connect the plants’ root systems. One plant in the central position of a row was subjected to osmotic stress, while neighbouring plants remained unstressed on both sides. Plants on one side of the stressed plant shared roots with others in the group but did not share roots with the stressed plant; these were the control group. On the other side, the stressed plant shared its roots with its nearest unstressed neighbour, and all the other plants shared their roots with their nearest neighbour (See Figure 9.1). Figure 9.1: Experimental set up for testing stress cues. Circles represent plants and connector lines represent the plants with connected roots. The numbers of the plants correspond to those of Table 9.1. Osmotic stress was induced in plant 6 (Modified from Falik et al., 2011). Stress was quantified fifteen minutes after the induction of drought by measuring the width of the stomatal openings on the leaves of the plants. The results of this experiment are as follows: ## Warning: package &#39;knitr&#39; was built under R version 3.5.2 Table 9.1: Raw data from Falik and collaborators (2011). type plant width control 1 12.109661 control 2 11.608355 control 3 9.446475 control 4 9.697128 control 5 10.840731 control 6 10.746736 control 7 10.605744 control 8 11.780679 control 9 11.608355 control 10 11.686684 control 11 11.874674 15min 1 11.577023 15min 2 10.903394 15min 3 12.093995 15min 4 11.013055 15min 5 11.483029 15min 6 7.221932 15min 7 7.973890 15min 8 7.080940 15min 9 8.772846 15min 10 9.838120 15min 11 11.639687 Questions Follow the instructions in Chapter 6 and enter the data into R and then save the data as a .csv. Submit your .csv file to the Biology Data Repository Brightspace. Follow the instructions in Chapter 5 and write metadata for the data that you saved in .csv formate. Submit your metadata to the Biology Data Repository Brightspace. Looking at the dataset, can you tell how many treatments were applied in the experiment? How many plants were used for each treatment? What is the smallest stomatal width measured? What is the largest? EXERCISE 3. Discrete independent variable Questions Follow the instructions in Chapter 7. Replicate the figure from the Campbell textbook (bar plot). Export your bar graph as a .pdf and insert it into Microsoft Word (or similar software). Add a caption to your bar plot. Print your graph to hand in with your lab report. In the bar graph, what can you tell about the stomatal openings of the treatment plant vs. the control plants? Is it consistent across all the individual plants? Follow the instructions in Chapter 7, re-plot the data from EXERCISE 1 as a boxplot. Export your boxplot as a .pdf and insert it into Microsoft Word (or similar software). Add a caption to your boxplot. Label the following on the boxplot: mean, 25% and 75% quantiles, 95% confidence limits, outliers. It is acceptible to write these labels in with pen or pencil. What does the boxplot tell you about the differences between the treatment plants (plants 6-11) vs. the control plants that the treatment plant does not? Why do you think a scientist might choose to represent these data one way over another? Write the hypothesis as an equation Questions Follow the instructions in Chapter 8. Write a hypothesis, prediction, and equation for these data. EXERCISE 4. Continuous independent variable Make a graph For some continous data that we will provide as a .csv. Use the Import DataSet button and import the data. Follow the instructions in Chapter 7, to make a scatterplot for these data. Follow the instructions in Chapter 7, to make a line graphs for these data. Export your line graph as a .pdf and insert it into Microsoft Word (or similar software). Write a figure caption. Print your graph and hand it in with your lab report for this week. Follow the instructions in Chapter 8. Write a hypothesis, prediction, and equation for these data. "],
["references.html", "References", " References "]
]
