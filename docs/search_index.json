[
["index.html", "Quantitative skills for biology Chapter 1 Introduction", " Quantitative skills for biology Chapter 1 Introduction Quantitative skills are necessary in biology. Quantitative skills include performing statistical analyses, mathematical modelling, managing and reformatting data, designing experiments, interpreting graphs, vizualizing data, identifying genes from DNA sequences, constructing 3D models of proteins, and making phylogenies. All of these tasks are now performed using computer software, and elements of computer programming, statistics, and applied mathematics can be useful for professional biologists. Quantitative skills and best practices in data science are now being incorporated throughout the biology major. Teaching quantitative skills is necessary since a survey reported that more than 90% of ecologists found, that in retrospect, their training in statistics and mathematics, during their undergraduate biology major, was too low (Barraquand et al. 2014). This same study found that practicing ecologists recommended that 30% of coursework during a biology major be dedicated to quantitative training. Today’s biologists use a variety of softwares, and particularly, Microsoft Office, R, Python, and ArcGIS. Much of this quantitative training manual teaches data manipulation and visualization in R. Our choice of R is for the following reasons: A valued skill: As of March 2019, R is the fifth ranked software listed in job advertisements for Data Scientists. Python is the number one ranked software, but R is a popular statistical software and is popular in biology due to the need to analyze the results of experiments using statistics. Reproducibility: R is a scripting software, so unlike point and click softwares, the steps to produce a data analysis or figure are fully reproducible. Accessibility: R is free. No limits: R has a large user community and contributed packages allow you to do almost anything. R packages range from serious to fun). Popularity: A survey of studies from of 30 ecology journals found that in 2017, 58% of article used R as the primary tool to generate their results (Lai et al. 2019). "],
["install.html", "Chapter 2 How to install R and R Studio", " Chapter 2 How to install R and R Studio R can be installed from https://www.r-project.org/. If you have problems with installing R this same website provides advice on how to seek support. R is a scripting language. R Studio is a graphical user interface (GUI) that facilitates R coding by providing buttons and menus to provide options for some commonly used commands. Download the free version RStudio Desktop from https://rstudio.com/products/rstudio/ For further help installing R and RStudio see YaRrr! The Pirate’s Guide to R "],
["rstudio.html", "Chapter 3 Finding your way around RStudio 3.1 Console pane 3.2 Source pane 3.3 Enviornment/History pane 3.4 Files/Plots/Packages/Help/Viewer pane", " Chapter 3 Finding your way around RStudio R studio has 4 windows (also known as “panes”) that are inter-linked. The default layout is shown in Figure 3.1. You can move the layout of the panes and change their size and shape by clicking and dragging with your mouse along the window pane borders. The details of what happens in each pane are detailed below. Figure 3.1: Panes in RStudio. 1. Source pane, to work with R scripts (code won’t be evaluated until you send it to the console). 2. Console pane, where code is executed by R. 3. Environment/History pane, to view objects in the working space and command history, respectively. 4. Files/Plots/Packages/Help pane, to see the file directories, plots, installed packages and access R help, respectively. 3.1 Console pane The Console pane (labelled 2 in Figure 3.1) is where code is evaluated (also referred to as executed). The Console pane has a prompt (the &gt; symbol), which tell you that R is ready to receive input. You can type code here to evaluate it and get an output. TRY IT! Type 5 + 5 in the console at the prompt and press enter or return. You’ll see that R gives the correct output (Don’t worry about the [1] for now, we’ll discuss what this means in Chapter X). 5+5 ## [1] 10 Use the console to test and query code, or do a quick analysis that you do not want to save. Press the up arrow to scroll through past commands, from most to least recent. To do more interesting things, we need to assign values to objects. For this, we create an object by specifying a name followed by the assignment operator &lt;- and the value we want to give it. For example: x &lt;- 5 When you run this code by pressing enter/return you will not see an output as you did before. But, you can ask R for the value by typing the object name and pressing enter/return: x ## [1] 5 Now that we have saved the value of x, we can do arithmetic operations with it. For example, instead of adding two numbers, we can assign those values to objects and then add them. TRY IT! Add 3 and 8 by assigning the values to objects. First assign 3 to x and 8 to y. Then add x+y. You can overwrite the value of objects The current value of your object is the last value you gave it. In the console type: x &lt;- 2 Press enter/return. Now type: x &lt;- 1 Press enter/return. What is the value of x + 1 ## [1] 2 Type: x ## [1] 1 to query the current value of x. EXCERCISE Can you write the code, and execute the commands in the correct order so that x + 1 = 6? 3.2 Source pane The Source pane (labelled 1 in Figure 3.1) is where you create, save, and edit R scripts. R scripts are blocks of code that perform a task that you want to save (e.g.., are the answer to the EXERCISE above, or import and clean data to make a figure) and when saved have a .R extension. When you’ve written and saved a script, you can re-use it for future projects. Try it now: open and save a new .R file to save your work in. In the top menu select File &gt; New File &gt; R Script, then File &gt; Save As. Paste the following R code into your script and save it: x &lt;- 4 x &lt;- 6 Now, you have saved this code, but has it been evaluated? To answer this question type x in your Console and press ENTER: x ## [1] 1 It is important to note that saving commands in a script in your Source window does not evaluate the commands in your Console. To execute the commands, with your script displayed in the Source pane, you need to click the Source button (righthand side of the source pane, equivalently select Code &gt; Source from the top menu bar; note, if you have a small Source pane the Source button may not appear and you may need to make it bigger or use the menu bar). Source your script and then evalate x in your Console. If you have done this task correctly the value of x should be 6 and it will appear as [1] 6 in your Console. What happened to x &lt;- 2? When Source is called the commands are executed in the Console from top to bottom as they appear in the script. Therefore, x &lt;- 2 was only the current value of x for a very short time before it was overwritten with the command x &lt;- 6. EXERCISE Edit your script so that now it reads: x &lt;- 4 y &lt;- x + 1 x &lt;- 6 z &lt;- x + 1 Source the script and then query the values of y and z in your Console. &gt; y &gt; z Explain why the values of y and z are 5 and 7 respectively. If you would like to run one line or several lines of your script only (not all the lines), then place your cursor on the line you want to execute and click the Run button (equivalenty Code &gt; Run Selected Line(s), or press Ctrl+enter or Cmmd+return for a shortcut). 3.3 Enviornment/History pane This pane has several tabs, we’ll discuss each in turn. Environment tab This shows you the names of all data objects (e.g., vectors, matrices, dataframes) that you’ve defined in the current R session, along with information about the size of data objects. There are also clickable actions, like Import data set, which we’ll refer to in Chapter 6. History tab This shows you a history of all the code you’ve previously run in the console. From here you can re-run this commands by selecting them and clicking To Console or include them in your script by clicking To Source. TRY IT! Select one of the commands and click To Console. You’ll see the command is executed and the output is given. Now, try to include another command in the script that you have been working with during this session. 3.4 Files/Plots/Packages/Help/Viewer pane This pane also has a few tabs. We’ll go through each one in detail. Files tab This tab gives you access to the file directory on your own computer. It’s a useful spot to set your working directory. For this, you have to navigate to the folder whence you want to read and save files, then click More and select Set As Working Directory (see Chapter 6 for more details). TRY IT! Navigate through the file tree and find the folder that you want to work with, alternatively, create a new one by clicking New Folder. Now, open the folder and make it your working directory. You’ll see that in the console R runs the command for changing the working directory. Plots tab This tab lets you see all the plots (graphs) that you create. You can also uset the buttons at the top to zoom, and to export the graph as a PDF or jpeg file. If you make multiple plots, you can navigate through them by clicking on the left and right arrows. We will come back to this tab in Chapter 7. Packages tab This tab shows a list of all the R packages installed on your computer (see Chapter X for more on packages). It also indicates which packages are loaded with a check mark. You can browse through the installed packages by typing the name in the blank search field. Packages are add-on functions and datasets that you can add to your R installation. To install a package you can click on Install, this feature will open a window with a blank field where you can type the name of the package. When you are ready click on Install to proceed with the installation. Alternatively, you can install with the command install.packages(&quot;name&quot;), where “name” is the name of the package. When you install a packege in either way, you will see in the console that R displays some information about where the package is being downloaded from and a progress bar. TRY IT! One package that we will use later on is called ggplot2, install it by either using the install.packages command or the Install feature. Help tab Here you can get help with R functions. You can type the name of the function in the search field (blank bar with the magnifying glass beside it) to see the related help page. Equivalently, you can use code to perform the search by typing ? followed by the function name. See Chapter 4 “Getting R help” for more details on reading the help files. TRY IT! Find the help page for the plot function, either by typing the function name in the search field or directly into the console. We will use this function in Chapter 7. Viewer tab This tab is similar to the Plots tab, but it is used to view local web content. For example, to display generated web content or applications that you are developing. This is a more advanced feature and we will not cover it in this guide. Add links to other resources "],
["help.html", "Chapter 4 Getting R help 4.1 Using R help 4.2 R “Cheatsheets” 4.3 R books 4.4 How to interpret R help files 4.5 Debugging", " Chapter 4 Getting R help The first place most people go for R help is the “Help” tabe in the “Files/Plots/Packages/Help” pane on the console (described in Chapter 3). Here you can do a search by topic/term using the search window at the top right. You can also click the “house” icon to go to the home menu for the help files and use the table of contents there to navigate to what you are looking for. 4.1 Using R help The hardest part about R help files is that at first they don’t seem that helpful, and to new R users, they seem to be written in code. However, all of the help pages are structured the same way, so once you learn how to de-code them, you’ll be well on your way. Below is an example of how to interpret R help files 4.2 R “Cheatsheets” Because R is open source software, there is also a culture of open access help. Several R programmers have made helpful “cheatSheets” that are worth printing off and hanging by your desk. Try this one by Tom Short for starters. 4.3 R books As with the cheatsheets, there are open access books out there (as well as expensive ones to buy). For beginners, “The Pirates Gude to R” by Nathaniel D. Phillips is HIGHLY recommended. You can access it here 4.4 How to interpret R help files R documentation follows the following format. As an example, we’ll use the screenshot below for a really simple statistical command (the t-test) to walk you through the R documentation. Numbers below correspond to the labels on the screenshot. header This simply gives the command for the thing you are trying to do, in R language Title This is a title of the function/command/tool in more plain language Description This section provides a short description of what the command does, written in reaonably plain language Usage This is where you see an example of R code that you use to execute the command (TIP you can tell what text in the help file is R code and what is other information by the font. Example code is in Courier font). Any example prefaced teh two hashtags (“##”) is a comment that adds additonal descitpion or provides different options for the comment. For example, for the t-test here, the first exampe is for the default method, where you are doing a t-test for a difference between two numeric vectors of data values (“x” and “y”). The second example is where you are applying the t-test to a formula instead of two numeric vectors. Until you start doing more advanced statistics, the default method will usually be what you use. Arguments This section breaks down every element in the R code under “Usage” above it and describes what the input is that you need to provide. It also gives you details about the options as well as what the defaults are. For example, for the t-test documentation here, it tells you that “x” is “a (non-empty) numeric vector of data values”. It also tells you that this is what “y” is but not that it tells you that “y” is optional (i.e., you can do a t-test on just one vector of data values). This fact is also shown in the example code where it says “y = NULL”). Note that you often do not have to input ALL the arguments. If you are happy with the defaults you don’t have to type in the code. For example, the description of the argument “alternative” tells you that you can specify whether the alternative hypothesis is two-sided (i.e., two-tailed), or one-tailed, in which case you have to say whether the alternative hypothesis is that the second set of data (e.g., the treatment) are greater or less than the first (e.g., the control). The default is that you are assuming the alternative hypothesis is two-sided. If this is what you want, then your code only needs to look like this t.test(x, y) However, if you want a one-sided test, and your alternate hypothesis is that the treatment (y) is greater than the control (x), then you need to type a bit more code, like this: t.test(x, y, alternative = c(&quot;greater&quot;)) Details This sectin gives you a little more detail (written a bit more like a stats text) about what the function is doing. For more advanced functions, there may be details on the types of inputs allowed and other caveats. This section is really helpful to read closely! Value This section lists the objects (output) created when you execute the command. The relevance of this list will become more clear once you start using R. See Also This section is usually just links to similar commands to the one you are reading up on, or related to it somewhow. These can be useful to explore when doing more complex statistical tests, or if you are not sure which test you should be using. Clicking the link will just take you to the Documentation page for that command, which will be set up exactly the same way as this one. 9 Examples This gives sample code and output. If you have installed the necessary package(s) to run this code, you can just try the code out yourself by typing the code exactly as shown in the example in the Console window of RStudio. It will call data that comes built in with the package when you installed it and can be a helpful way for you to understand how the command is working before you try it with your own data. 4.5 Debugging Spelling mistakes Input to a function is the wrong data type Run line by line Cut and paste example "],
["data.html", "Chapter 5 Data and metadata", " Chapter 5 Data and metadata Joany will write this section. Maybe we could do a lab meeting or eco-evo to figure out what to do for metadata, i.e., look for good examples. I think look at the Ethan White course. The paper by Kara Woo is quite good and worth a cite. Here we need to provide the rationale for saving data as we recommend we also need to provide the metadata guidelines. Maybe find a paper by someone who is up on this kind of stuff and see how they did the metadata. Also talk about why highlight cells in excel or making borders isn’t a good idea, i.e. tidy data exercise. Twitter recommends: https://github.com/ropenscilabs/dataspice https://aslopubs.onlinelibrary.wiley.com/hub/journal/23782242/about/author-guidelines#data https://www.usgs.gov/products/data-and-tools/data-management/metadata-creation Browse http://sciencebase.gov and http://data.usgs.gov for both good and bad examples fo these standards in use (as well as examples from before) http://Data.gov will have more examples too The metadata sectin of this paper is really great for a quick run down of what metadata is: https://ojs.library.queensu.ca/index.php/IEE/article/view/4608 "],
["data-entry.html", "Chapter 6 Entering and loading data 6.1 Entering data 6.2 Loading or importing data 6.3 Inspecting the data", " Chapter 6 Entering and loading data 6.1 Entering data Good data organization is the foundation of any research project, and this begins with entering and archiving data. There are several reasonable options for data entry, for example: Spreadsheet Text file Database Form (web or GUI databases). In R, you can also input data directly, which can be the right choice if you are working with a small dataset. Here, you will learn how to enter the data from your experiments and save them using R. Let’s start by making Table 1 for your report, which we will call solution-concentration-effect-on-potato.csv: table1 &lt;- data.frame(weight = c(&quot;initial&quot;, &quot;final&quot;, &quot;difference&quot;, &quot;percent-change&quot;), &quot;NaCl-0-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-0.9-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-2-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-5-percent&quot; = c(NA, NA, NA, NA)) write.csv(x = table1, file = &quot;solution-concentration-effect-on-potato.csv&quot;, row.names = FALSE) In the above code, make sure to replace the NA’s with the values from your experiment. Keep in mind that the values entered into the tables should be decimals greater than or equal to zero, and likely less than 100 since you measured mass in grams and the potato cubes for the experiments were 8 cm3 in size. Notice that we used the file extension “.csv”. CSV stands for comma-separated values, which is a format for tabular data stored in a text file where a comma separates the columns of the data. That is why a comma separates each of the values in the rows for the different solutions. Now, we will make Table 2, which includes the class averages and we will call solution-concentration-effect-on-potato-averages.csv: table2 &lt;- data.frame(weight = c(&quot;percent-change&quot;, &quot;minimum-value&quot;, &quot;maximum-value&quot;, &quot;difference&quot;), &quot;NaCl-0-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-0.9-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-2-percent&quot; = c(NA, NA, NA, NA), &quot;NaCl-5-percent&quot; = c(NA, NA, NA, NA)) write.csv(x = table1, file = &quot;solution-concentration-effect-on-potato-averages.csv&quot;, row.names = FALSE) You might have just done this in Excel. We did not teach this method because… 6.2 Loading or importing data We will look at two ways of importing data into R, via a command or using the import feature. Both options are equivalent; and when they are sucsesfull you will see your data as a new object in the Environment tab (in the Environment/History pane). 6.2.1 The programmatic way We can load our our data files in CSV format into R using the function read.csv in the following way: data1 &lt;- read.csv(file = &quot;solution-concentration-effect-on-potato.csv&quot;) data2 &lt;- read.csv(file = &quot;solution-concentration-effect-on-potato-averages.csv&quot;) Here, the argument file = of read.csv is the name of the file we want to read. Notice that the filename needs to be a character string, so we put it in quotes. 6.2.2 The RStudio way In RStudio, click on the Environment tab. Then, click on Import Dataset and select From Text (base). Figure 6.1: Using the Import Dataset feature. This feature will open a file browser where you can locate the .csv file, in our case, for Table 1, it is called solution-concentration-effect-on-potato.csv. Once you have selected the file click Open. A dialog for importing the file will open up: on the left you can set the options on the import; on the top right you can see Input File, which is how the file looks like; on the bottom right you can see Data Frame, which is a preview of how the file or data will look like in R. In the Name field, write data1 to rename the dataset. Set Heading to Yes, this will tell R to read and include the first row of the file as the names of the columns - This is an important step! You will see that the column names appear in bold in the Data Frame box. When you are ready click Import. Figure 6.2: Dataset import options. RStudio will now run the R code that imports your dataset. It will be similar to the command used in Section 6.2.1. 6.3 Inspecting the data To take a look at our dataset, we can print it by typing the name in the Console and hitting Enter (or Return). data1 ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA data2 ## weight NaCl.0.percent NaCl.0.9.percent NaCl.2.percent NaCl.5.percent ## 1 initial NA NA NA NA ## 2 final NA NA NA NA ## 3 difference NA NA NA NA ## 4 percent-change NA NA NA NA You can also open the dataset by clicking on the object data1 in the Environment tab. This will open a new tab with the dataset, instead of printing it into the Console, which is a good choice if your dataset is larger. Another option is to open the dataset using Microsoft Excel from your computer file browser. "],
["graph.html", "Chapter 7 Making graphs in R 7.1 Scatter and line plots with plot(x,y) 7.2 Other useful plot functions 7.3 Getting a bit more sophisticated 7.4 pch cheatsheet", " Chapter 7 Making graphs in R (AH: Yolanda, I edited a bit here, hope that’s okay. Note that ```{r} actually runs the R code and makes the figures, so you don’t actually have to import the figures they’re generated via R) (AH: Need instructions to export figures Also, typ = “l” for a line graphs, and also, here I think we should make a note about is x is not monotonically increasing how the plot can get messed up) **(AH: Add links to other resources that covers these same topics) (AH: Joany do you want to read over this section and meet with me to talk about wht to do to improve it) You might have had experience making graphs using Microsoft Excel, however, making graphs with Excel is not recommended. A number of reasons to choose R over Excel are given in Chapter 1. In addition, the defaults in Excel do not meet standards for good scientific graphs and you do not have the option to learn more sophisticated graphs after you master the basics, as the range of options available in Excel is limited. You can make very attractive, clean, professional graphs and figures in R. This chapter is a basic introduction to plot() functions in R. More advanced users can use the package ggplot. There are many good reference manuals for making sophisticated graphs (e.g., Murrell 2006; Mittal 2011). 7.1 Scatter and line plots with plot(x,y) In R, plot() is a built-in function: you do not need to install a package to call it. There are two mandatory arguments x and y which are vectors that must have the same length. For example, x &lt;- c(2,4,6,8,10) y &lt;- c(10,20,30,40,50) Copy and paste the above code into your Console and type Enter/Return. Note that to make a vector we need to use c(). Now, query the value of x by typing x into your Console x ## [1] 2 4 6 8 10 This lets us know that x is a vector that is a list of 5 numbers. The command plot(x,y) will mark points on the graph by taking elements in the same position in the x and y vectors. For example, in the first position of the x and y vectors are 2 and 10, respectively. Because plot(x,y) has x as its first argument, the values of x will correspond to the horizontal axis of the plot. Therefore, the first element of the lists x and y, will be reflected in the plot as a point marked at the 2 position of the horizontal axis and the 10 position on the vertical axis. As the vectors x and y in our example are a list of 5 numbers our graph will consist of 5 points, generated by pairing values in the x and y vectors in the same position. x &lt;- c(2,4,6,8,10) y &lt;- c(10,20,30,40,50) plot(x,y) Will give a graph like this: Figure 7.1: A poor example of a scatter plot Try it yourself by copy and pasting the above code into your Console. If x and y do not have the same lengths, the plot() function will give an error. Try the code below by copy and pasting it into your console: x &lt;- c(2) y &lt;- c(10,20,30,40,50) plot(x,y) Note the error message that is generated so that if you get this error later when coding on your own you might remember that this error is generated because x and y have different lengths. Now try this code: x &lt;- c(2,2,2,2,2) y &lt;- c(10,20,30,40,50) plot(x,y) length(x) length(y) Note we can use length() to query the length of x and y. In addition, the names x and y are the users choice. A nearly identical plot is generated with the code: A &lt;- c(2,2,2,2,2) B &lt;- c(10,20,30,40,50) plot(A,B) The key is the internal consistency: A and B are the names of the vectors and these same names appear as the arguments of plot(A,B). Can you guess what happens if you try plot(B,A) or plot(A,A)? Type these into your Console and give it a try. EXERCISES Which two vectors below will generate a plot if executed before plot(a,b)? a = c(1,3,5) a = c(2,4,5,6,7) b = c(2,2,4,6) b = c(2,4,6) A friend has written the code below, but it will not run. What do you think the problem could be? a = c(1,2,3) b = c(2,4,6) plot(x,y) 7.1.1 Adding axes labels and changing symbols Note that all of the Figures we have made so far are not great: none meet the standards of a good figure. What’s missing? meaningful x and y axis labels, maybe it’s more appropriate to show this data connected with a line, and maybe you want the symbols to be a different shape or colour. In addition, to the two manadatory arguments x and y, the plot() function has other optional argument that can be called to make a better figure. Try using the help() learn about more options to change the look of your plot (refer to Chapter 4, Getting help in R, to recall how to display and read help files): help(plot) You’ll see there are a lot of optional arguments. First, let’s fix the axis labels. x &lt;- c(2,4,6,8,10) y &lt;- c(10,20,30,40,50) plot(x,y, xlab = &quot;temperature (degrees C)&quot;, ylab = &quot;growth rate (cm)&quot;) This one is a little better. Copy and paste the above code into your Console to make sure you can make the graph with axes labels. If you want to change the symbols, you use the pch argument to change the style (see Section 7.4). Note, that pch = 17 corresponds to filled triangles, so let’s make the graph, but with filled triangles. plot(x,y, pch = 17, xlab = &quot;temperature (degrees C)&quot;, ylab = &quot;growth rate (cm)&quot;) Note that the order of the optional arguments is unimportant (the function arguments are separated by ,) particularly where arguments are labelled with xlab = or ylab =. Lets try to see if we can put the arguments out of order and end up with the wrong graph: plot(pch = 17, ylab = &quot;growth rate (cm)&quot;, xlab = &quot;temperature (degrees C)&quot;, y,x) In the above graph, we wanted &quot;growth rate (cm)&quot; and the vertical axis and this has appeared correctly, but the values of growth rate should be c(10,20,30,40,50) and now we see the values of y have appeared on the horizontal axes rather than on the vertical axis where they should be. This is because y appears before x in the plot command and whichever vector appears first will be read as corresponding to the values on the horizontal axis. On the other hand &quot;ylab=&quot; appears before &quot;xlab=&quot; but this does not cause a problem because &quot;ylab=&quot; still appears on the vertical axis as it should. 7.1.2 Line graphs 7.1.3 Exporting your graphs 7.2 Other useful plot functions The generic plot() function makes a scatter plot, with variations. For other types of plots, R has different functions, but all have similar arguments for adjusting the labels, spacing, tic marks, symbols, etc. See the following barplot{graphics} to make bar graphs boxplot{graphics} to make boxplots hist{graphics} to make a histogram 7.3 Getting a bit more sophisticated It’s not hard to get more sophisticate with R graphics. The best approach is to explore one of the reference books listed to figure out how to do what you want to do. One thing most undergrads will probably need or want to do is to visualize two sets of data on the same graph. For example, the goldfish data in the Appendix of the BIOL 1001 lab manual shows the opercular beats of two fish in response to temperature. It would be logical to show both fish on the same graph, but with different symbols. Here’s how you would do it: ```temp &lt;- cbind(5, 8, 12, 16, 20, 23) #This creates the vecor of data for the x-axis fishA &lt;- cbind(36, 42, 59, 73, 88, 96) #This creates the vector of data for Fish A fishB &lt;- cbind(40, 49, 61, 71, 82, 90) #This creates the vector of data for Fish B First we plot x and y with the “temp” vector as “x” and the “fishA” vector as y plot(temp, fishA, pch = 17, xlab = “temperature (degrees C)”, ylab = “opercular beats (bpm)”) Then to add a second vector of data (fishB) to the same plot, we use: points(temp, fishB, pch = 17, col = “dimgray”)``` Voila! Figure 7.2: The effect of water temperature on opercular beats per minute (bpm) for two goldfish; goldfish A (black triangles) and goldfish B (grey triangles) Note that the difference in the two symbols is described in the caption. For most scientific journals it is preferred to describe the symbology in the caption, rather than use a legend. However, with more complex graphs, or for some publications, you may wish to include a legend. Legends can be a bit tricky to work with in R - we’ll leave those for a more advanced course. 7.4 pch cheatsheet As it is hard to remember that pch = 17 corresponds to filled triangles you can make a little cheat sheet for pch codes using the code below. You may want to print out a chart of the pch codes and tape it up on your wall by your computer, or in the front of your notebook as a handy reference. #++++++++++++++++++++++++++++++++++++++++++++ #generate a plot of point shapes which R knows about. #++++++++++++++++++++++++++++++++++++++++++++ generateRPointShapes&lt;-function(){ oldPar&lt;-par() par(font=2, mar=c(0.5,0,0,0)) y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5))) x=c(rep(1:5,5),6) plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5), axes=FALSE, xlab=&quot;&quot;, ylab=&quot;&quot;, bg=&quot;blue&quot;) text(x, y, labels=0:25, pos=3) par(mar=oldPar$mar,font=oldPar$font ) } generateRPointShapes() "],
["hypothesis.html", "Chapter 8 Hypothesis, predictions and equations 8.1 Types of variables", " Chapter 8 Hypothesis, predictions and equations The proposed answer to a problem is termed a hypothesis. Hypotheses are formulated generally on the basis of some preliminary observations in combination with prior knowledge. How does the presence of a concentration gradient affect the direction of osmosis? There are three possible answers to this problem. H1. Water diffuses from a hypertonic solution into a hypotonic solution. H2. Water diffuses from a hypotonic solution into a hypertonic solution. H3. Water diffuses equally in both directions. All three meet the basic requirement of a hypothesis, namely, they are predictive, are clearly expressed and are an answer to the problem; however, #2 is the most likely hypothesis given background reading on osmosis. Predictions are generated from the hypothesis and framed in terms of a specific experiment or analysis. Experiment 1 Consider an osmometer containing a 30% glucose and dye solution placed in a beaker containing distilled water. If hypothesis #2 holds true water will diffuse from the hypotonic solution (the water in the beaker) into the hypertonic solution (the 30% glucose and dye solution in the osmometer) and the water will rise in the pipette. Note how this prediction was generated using the if … then … format. I.e. if the hypothesis holds true, then a specific event will occur (prediction). The prediction corresponding to H2 is: if water diffuses from a hypotonic solution into a hypertonic solution (hypothesis), then water will diffuse from the beaker into the osmometer causing the water in the pipette to rise. Although hypotheses and predictions are similar, two basic differences exist: hypotheses are general, predictions are specific; hypotheses are written in the present tense, predictions in the future tense. Equations write the predictions in mathematical notation so that statistical tests can be applied to determine if the hypothesis is supported. The equation corresponding to the prediction in the box above is: \\(v_F &gt; v_0\\) \\(v_F\\) is the final volume of the glucose-dye solution in the osmometer (units: mL), \\(v_0\\) is the initial volume of glucose-dye solution in the osmometer (units: mL). When writing your prediction as an equation you get to choose the notation: you might have instead decided that y is the final volume of the glucose-dye solution; this choice is also correct if you correctly explain what variable is represented by what you have chosen to call y. You many choose any lower or upper case Arabic (i.e., a,b,c…) or greek (i.e., α, β, γ, …) letters for your variables and you may also choose to use subscripts. Choose symbols that are one letter long. For example, \\(vF\\) (two symbols long) is a less preferred symbol choice because this could be confused with \\(v\\) multiplied by \\(F\\). It is usual to choose symbols that are intuitive (i.e. here, \\(v\\) helps us think of volume and \\(F\\) helps us think of ‘final’). Commonly, μ or bar notation, i.e., \\(\\bar{\\nu}\\) represents the mean of multiple observations. It is a good idea to avoid “O” which can be confused with zero, and e, i, π and Σ, which have specific definitions in mathematics, however, these considerations are preferred, an answer that does not use these conventions is not necessarily wrong. The necessary element of your answer is that you provide a description of the notation you define. You must provide the units for the quantities you define. The dependent variable (see below for a defintion) is to appear on the lefthand side of the equals or inequality. You will not perform statistical tests in BIOL 1001 or 1002. However, learning how to write your predictions as an equation will help you to understand how your hypothesis and predictions connect to statistical tests that help determine whether a hypothesis is supported or refuted. 8.1 Types of variables Generally, a hypothesis describes the effect of one factor on another, for example, the effect of a concentration gradient on the direction of osmosis. These factors are called variables and are of two types: the variable that is changed (varied) by the experimenter is called the INDEPENDENT VARIABLE, and the variable that changes as a consequence of the changes to the independent variable is called the DEPENDENT VARIABLE. In our example: The glucose concentration in the osmometer is the INDEPENDENT VARIABLE because it is created by the experimenter, and The volume of water in the pipette is the DEPENDENT VARIABLE because it is affected directly by the concentrations inside and outside the osmometer, and is the measured response. Experiment 2 Consider an expanded version of the previous experiment, where we now consider concentrations of 30, 60, and 90% glucose in the osmometer, all in beakers of distilled water. For Experiment 2, we might have the following as our hypothesis, prediction and equation: Hypothesis: When a solution is more hypertonic, more water will diffuse into it from a hypotonic solution. Prediction: The volume of water in the osmometer will be largest for the 90% glucose solution, and smallest for the 30% glucose solution. Equation: \\(v_F = bg + v_0\\), where \\(v_F\\) is the final volume of liquid in the osmometer (mL), \\(b\\) is the change in final volume per unit glucose concentration (mL per %), g is the glucose concentration (%), and \\(v_0\\) is the final volume when the glucose concentration is zero (mL). Note that in Experiment 2, the independent variable, glucose concentration, takes three different values, (30, 60 and 90%) and these values are taken from options along a continuum. As such, in the above equation we have treated glucose concentration as a CONTINUOUS variable. This changes our hypothesis and predictions. Let’s examine the new equation more closely. We predicted an increasing relationship between glucose concentration and the final volume of water in the osmometer. In writing our equation, we, more specifically, assumed a linear, or “straight-line”, relationship. An increasing relationship does not have to be a linear relationship, however, without a good reason to assume otherwise, we should assume that a prediction stating an increasing or decreasing relationship between two variables corresponds to a linear (or “straight-line”) relationship with where an increasing relationship has a positive slope and a decreasing relationship has a negative slope. Recall that the equation for a straight-line is: \\(y = m x + b\\), where \\(y\\) corresponds to the vertical axis of a graph, \\(x\\) corresponds to the horizontal axis, \\(m\\) is the slope of the line and \\(b\\) is the y-axis intercept (corresponding to \\(x = 0\\)). Note that the equation above is simply the equation for a straight-line written in the notation of our experiment: \\(v_F\\), the dependent variable, is \\(y\\), \\(b\\), the effect of \\(g\\) on \\(v_F\\), is \\(m\\), the slope, \\(g\\), the independent variable, is \\(x\\), \\(v_0\\), the final volume when \\(g = 0\\), is \\(b\\). Note that the units for each term are equal: \\(v_F\\) has units mL \\(bg\\) has units \\(\\frac{mL}{\\%} \\cdot \\% =\\) mL \\(v_0\\) has units mL Finally, lets consider a third experiment where the independent variable is DISCRETE. Experiment 3 The Glycemic Index Foundation of South Africa designates Beverages as “Low”, “Intermediate” or “High” Glycemic Index (GI) values. In this experiment, 3 beverages from each group: Low, Intermediate, and High, are used in place of the glucose solution in the osmometer, and for each of these 9 experiments the solution in the beaker is distilled water. In Experiment 3, the independent variable is DISCRETE because each beverage belongs to a group. The hypothesis, prediction, and equation for Experiment 3 might be: Hypothesis: When a solution is more hypertonic, more water will diffuse into it from a hypotonic solution. Prediction: The volume of water in the osmometer will be largest for the three beverages from the “High” GI group, and smallest for the 3 beverages from the “Low” GI group. Equation: \\(μ_H &gt; μ_I &gt; μ_L\\), where \\(μ_H\\) is the mean volume of liquid in the osmometer for the three “High” GI beverages (mL), \\(μ_I\\) is the mean volume of liquid in the osmometer for the three “Intermediate” GI beverages (mL), and \\(μ_L\\) is the mean volume of liquid in the osmometer for the three “Low” GI beverages (mL). The equation for Experiment 3 is similar to the equation for Experiment 1. For Experiment 3, there were three beverages in each group, so we defined a measure of the central tendency, in this case the mean, so that we could compare between the groups. "],
["lab2.html", "Chapter 9 BIOL 1001: LABORATORY 2 BIOLOGICAL DATA WITH COMPUTERS EXERCISE 1. Intro to RStudio EXERCISE 2. Entering data EXERCISE 3. Discrete independent variable EXERCISE 4. Continuous independent variable", " Chapter 9 BIOL 1001: LABORATORY 2 BIOLOGICAL DATA WITH COMPUTERS PURPOSE To familiarize with R Studio To learn how to record data in electronic format To learn how to write hypotheses as equations To learn how to choose the appropriate visualizations To learn how to make graphs using R Studio Before coming to the laboratory: If you wish to use your own laptop, then install R and RStudio. For instructions see Chapter 2. Before coming to the laboratory read: In the quant guide: Sections In the printed lab manual: Appendix II: Something or other EXERCISE 1. Intro to RStudio Maybe borrow a little exercise from software carpentary. Nothing to hand in/assess? EXERCISE 2. Entering data We will use data from a research paper that investigated whether plants were able to respond to stress cues emitted from their drought-stressed neighbours (Falik et al. 2011). The research team used Pisum sativum plants in an experimental setup that allowed them to connect the plants’ root systems. One plant in the central position of a row was subjected to osmotic stress, while neighbouring plants remained unstressed on both sides. Plants on one side of the stressed plant shared roots with others in the group but did not share roots with the stressed plant; these were the control group. On the other side, the stressed plant shared its roots with its nearest unstressed neighbour, and all the other plants shared their roots with their nearest neighbour (See Figure 9.1). Figure 9.1: Experimental set up for testing stress cues. Circles represent plants and connector lines represent the plants with connected roots. The numbers of the plants correspond to those of Table 9.1. Osmotic stress was induced in plant 6 (Modified from Falik et al., 2011). Stress was quantified fifteen minutes after the induction of drought by measuring the width of the stomatal openings on the leaves of the plants. The results of this experiment are as follows: Table 9.1: Raw data from Falik and collaborators (2011). type plant width control 1 12.109661 control 2 11.608355 control 3 9.446475 control 4 9.697128 control 5 10.840731 control 6 10.746736 control 7 10.605744 control 8 11.780679 control 9 11.608355 control 10 11.686684 control 11 11.874674 15min 1 11.577023 15min 2 10.903394 15min 3 12.093995 15min 4 11.013055 15min 5 11.483029 15min 6 7.221932 15min 7 7.973890 15min 8 7.080940 15min 9 8.772846 15min 10 9.838120 15min 11 11.639687 Questions Follow the instructions in Chapter 6 and enter the data into R and then save the data as a .csv. Submit your .csv file to the Biology Data Repository Brightspace. Follow the instructions in Chapter 5 and write metadata for the data that you saved in .csv formate. Submit your metadata to the Biology Data Repository Brightspace. Looking at the dataset, can you tell how many treatments were applied in the experiment? How many plants were used for each treatment? What is the smallest stomatal width measured? What is the largest? EXERCISE 3. Discrete independent variable Questions Follow the instructions in Chapter 7. Replicate the figure from the Campbell textbook (bar plot). Export your bar graph as a .pdf and insert it into Microsoft Word (or similar software). Add a caption to your bar plot. Print your graph to hand in with your lab report. In the bar graph, what can you tell about the stomatal openings of the treatment plant vs. the control plants? Is it consistent across all the individual plants? Follow the instructions in Chapter 7, re-plot the data from EXERCISE 1 as a boxplot. Export your boxplot as a .pdf and insert it into Microsoft Word (or similar software). Add a caption to your boxplot. Label the following on the boxplot: mean, 25% and 75% quantiles, 95% confidence limits, outliers. It is acceptible to write these labels in with pen or pencil. What does the boxplot tell you about the differences between the treatment plants (plants 6-11) vs. the control plants that the treatment plant does not? Why do you think a scientist might choose to represent these data one way over another? Write the hypothesis as an equation Questions Follow the instructions in Chapter 8. Write a hypothesis, prediction, and equation for these data. EXERCISE 4. Continuous independent variable Make a graph For some continous data that we will provide as a .csv. Use the Import DataSet button and import the data. Follow the instructions in Chapter 7, to make a scatterplot for these data. Follow the instructions in Chapter 7, to make a line graphs for these data. Export your line graph as a .pdf and insert it into Microsoft Word (or similar software). Write a figure caption. Print your graph and hand it in with your lab report for this week. Follow the instructions in Chapter 8. Write a hypothesis, prediction, and equation for these data. "],
["coding-club-at-mun.html", "Chapter 10 Coding club at MUN", " Chapter 10 Coding club at MUN Starting in Fall 2020, we will begin a weekly coding club aimed at undergraduates in Biology (or related disciplines) that would like to improve their coding skills. During the coding club you might like to: Re-read this manual and make sure you are able to complete the exercises. Work on software carpentary modules: https://software-carpentry.org/lessons/ Work on coding club modules: https://ourcodingclub.github.io/ Work on University of Toronto coders modules: https://uoftcoders.github.io/studyGroup/lessons/ Work on the Tidy Tuesday problem: https://github.com/rfordatascience/tidytuesday ADVANCED: Help us with the development of this manual. Specifically, if you can learn how to use Github and bookdown you can easily incorporate your suggestions. The repository for this training manual is here: https://github.com/ahurford/quantitative-training-guide ADVANCED: Help others with R. Gradaute students are also welcome to attend coding club. "],
["references.html", "References", " References "]
]
